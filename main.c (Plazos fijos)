#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "../Fecha/Fecha.h"
#include "../SolucionParcialPlazosFijosTopicos/SolucionParcialPlazosFijos.h"

//Fue el primero que hice, tiene varios errores

typedef int (*Cmp)(const void*, const void*);
typedef void (*print_callback)(const void*);
int mostrarArchivo_ALU(const char* nombreArchivo, unsigned tam, void (*print)(const void*));
void vectorOrdenarInserI_ALU(void* indices, int cantReg, size_t tamElem, Cmp cmp);
PlazoFijo* cargarVectorPF_ALU(const char* nombrePlazosFijos, int* ce);
void procesarPF_ALU(FILE* cuentasDat, PlazoFijo* plazosFijosVec, int ce, Fecha* fechaProceso);
void intercambiar_ALU(void* elem1, void* elem2, size_t tamElem);
int cmpINT_ALU(const void* elem1, const void* elem2);
int esFechaVencida(Fecha* fechaProceso, Fecha* fechaVencimiento);
Fecha sumarDiasAFecha_ALU(const Fecha* f, unsigned dias);
int cantDiasMes_ALU(int mes, int anio);
bool esBisiesto_ALU(int anio);
int txtAFecha(const char* fechaTxt, Fecha* fecha);


void print_plazoFijo(const void* plazoFijo) {
    PlazoFijo* pf = (PlazoFijo*)plazoFijo;
    printf("PlazoFijo: %d %d %.2f %.2f %d/%d/%d %d\n", pf->nroPF, pf->cuenta, pf->monto, pf->interesAnual, pf->fechaConstitucion.dia, pf->fechaConstitucion.mes, pf->fechaConstitucion.anio, pf->dias);
}
void print_cuenta(const void* cuenta) {
    Cuenta* c = (Cuenta*)cuenta;
    printf("Cuenta: %d Nombre y apellido: %s Saldo: %.2f\n", c->cuenta, c->cliente, c->saldo);
}

int main(int argc, char* argv[]){

    puts("Cuentas antes de actualizar:");
    mostrarArchivo_ALU(argv[1], sizeof(Cuenta), print_cuenta);

    FILE* cuentasDat = fopen(argv[1], "r+b");

    if(!cuentasDat)
        return 2;

    Fecha fechaProceso;
    int fechaOk = txtAFecha(argv[3], &fechaProceso);
    if(!fechaOk)
        return 3;

    PlazoFijo* plazosFijosVec = NULL;
    int ce;

    plazosFijosVec = cargarVectorPF_ALU(argv[2], &ce);

	procesarPF_ALU(cuentasDat, plazosFijosVec, ce, &fechaProceso);

    fclose(cuentasDat);

    puts("\nCuentas despues de actualizar:");
    mostrarArchivo_ALU(argv[1], sizeof(Cuenta), print_cuenta);

    return 0;
}

PlazoFijo* cargarVectorPF_ALU(const char* nombrePlazosFijos, int* ce){
    int j, i;
    FILE* pf = fopen(nombrePlazosFijos, "rt");
    if(!pf){
        printf("Error al abrir el archivo %s\n", nombrePlazosFijos);
        return NULL;
    }
    fseek(pf, 0, SEEK_END);   ///no ponemos en el final del archivo
    *ce = ftell(pf)/sizeof(PlazoFijo);  ///ftell devuelve cantidad bytes del archivo, divido por tama√±o de la estructura para saber cuantos registros hay
    fseek(pf, 0, SEEK_SET); ///volvemos al principio del archivo
    PlazoFijo* aux = malloc(sizeof(PlazoFijo)*(*ce));
    if(!aux){
        printf("Error al reservar memoria para el vector de PlazoFijo\n");
        fclose(pf);
        return NULL;
    }
    i=0;
    int* indices = malloc(sizeof(int)*(*ce));
        while(fscanf(pf, "%d|%d|%f|%f|%d/%d/%d|%d\n", &aux[i].nroPF, &aux[i].cuenta, &aux[i].monto, &aux[i].interesAnual, &aux[i].fechaConstitucion.dia, &aux[i].fechaConstitucion.mes, &aux[i].fechaConstitucion.anio, &aux[i].dias)==8){
            indices[i]= aux[i].cuenta;
            i++;
        }
    vectorOrdenarInserI_ALU(indices, *ce, sizeof(int), cmpINT_ALU);
    ///ahora que tengo los valores del indice ordenados, los comparo uno a uno con los valores de cuenta de aux y los acomodo con intercambiar
    j=0;
    while(j<*ce){
        short found = 0;
        for(i=0; i<*ce && !found; i++){
            if(indices[j]==aux[i].cuenta){
                intercambiar_ALU(aux+i, aux+j, sizeof(PlazoFijo));
                found = 1;
            }
        }
        j++;
    }
     for (i=0; i<*ce; i++){
         printf("PlazoFijo: %d %d %.2f %.2f %d/%d/%d %d\n", aux[i].nroPF, aux[i].cuenta, aux[i].monto, aux[i].interesAnual, aux[i].fechaConstitucion.dia, aux[i].fechaConstitucion.mes, aux[i].fechaConstitucion.anio, aux[i].dias);
     }
    free(indices);
    fclose(pf);
    return aux;
}

void procesarPF_ALU(FILE* cuentasDat, PlazoFijo* plazosFijosVec, int ce, Fecha* fechaProceso){
    Cuenta cuentaAux;
    int i=0;
    while(fread(&cuentaAux, sizeof(Cuenta), 1, cuentasDat)==1){
        short flag = 0;
        while(i<ce && cuentaAux.cuenta == plazosFijosVec[i].cuenta){
            Fecha aux = sumarDiasAFecha_ALU(&plazosFijosVec[i].fechaConstitucion, plazosFijosVec[i].dias);
           if(esFechaVencida(fechaProceso, &aux)){   ///prestar atencion a los casteos
            cuentaAux.saldo += plazosFijosVec[i].monto + ((float)plazosFijosVec[i].dias/365) * (plazosFijosVec[i].interesAnual/100) * plazosFijosVec[i].monto;
            flag = 1;
            }
            i++;
        }
        if(flag){
            fseek(cuentasDat, -sizeof(Cuenta), SEEK_CUR);
            fwrite(&cuentaAux, sizeof(Cuenta), 1, cuentasDat);
            fflush(cuentasDat);
        }
    }
}


void vectorOrdenarInserI_ALU(void* indices, int cantReg, size_t tamElem, Cmp cmp){
    int j;
    for(int i=1; i<cantReg; i++){
        for(j=i; j>0 && cmp(indices+(j-1)*tamElem, indices+j*tamElem)>0; j--){
            intercambiar_ALU(indices+(j-1)*tamElem, indices+j*tamElem, tamElem);
        }
    }
}

int cmpINT_ALU(const void* elem1, const void* elem2){
    return *(int*)elem1 - *(int*)elem2;
}

//// compara dos codigos alfanumericos
// char cmpChar_ALU(const void* elem1, const void* elem2){
//     return strcmp((char*)elem1, (char*)elem2);
// }

void intercambiar_ALU(void* elem1, void* elem2, size_t tamElem){
    char* aux = malloc(tamElem);
    memcpy(aux, elem1, tamElem);
    memcpy(elem1, elem2, tamElem);
    memcpy(elem2, aux, tamElem);
    free(aux);
}

int mostrarArchivo_ALU(const char* nombreArchivo, unsigned tam, void (*print)(const void*)){
    FILE * pf = fopen(nombreArchivo, "rb");
    if (!pf)
        return -11;
    void * buffer = malloc(tam);
    if(!buffer){
        fclose(pf);
        return -12;
    }
    printf("-------Archivo: %s-------\n", nombreArchivo);
    while(fread(buffer, tam, 1, pf) == 1){
        print(buffer);
    }
    printf("-------Fin de archivo-------\n");
    fclose(pf);
    free(buffer);
    return 0;
}

int esFechaVencida(Fecha* fechaProceso, Fecha* fechaVencimiento){
    if (fechaProceso->anio > fechaVencimiento->anio)
        return 1;
    else if (fechaProceso->anio == fechaVencimiento->anio && fechaProceso->mes > fechaVencimiento->mes)
        return 1;
    else if (fechaProceso->anio == fechaVencimiento->anio && fechaProceso->mes == fechaVencimiento->mes && fechaProceso->dia >= fechaVencimiento->dia)
        return 1;
    return 0;
}

Fecha sumarDiasAFecha_ALU(const Fecha* f, unsigned dias){
    Fecha res = *f;
    res.dia += dias;
    while (res.dia > cantDiasMes_ALU(res.mes, res.anio)) {
        res.dia -= cantDiasMes_ALU(res.mes, res.anio);
        if (++res.mes > 12) {
            res.mes = 1;
            res.anio++;
        }
    }
    return res;
}

int cantDiasMes_ALU(int mes, int anio){
    int cdm[13]={0,31,28,31,30,31,30,31,31,30,31,30,31};
    if (mes==2&&esBisiesto_ALU(anio))
        return 29;
    return cdm[mes];
}

bool esBisiesto_ALU(int anio){
    return anio%4==0&&(anio%100!=0||anio%400==0);
}

int txtAFecha(const char* fechaTxt, Fecha* fecha){
    if (sscanf(fechaTxt, "%d/%d/%d", &fecha->dia, &fecha->mes, &fecha->anio) == 3)
        return 1;
    else
        return 0;
}
